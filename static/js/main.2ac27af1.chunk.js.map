{"version":3,"sources":["components/TableView.js","components/ChartView.js","hooks/useWindowSize.js","components/DataView.js","components/StatsScreen.js","components/Loading.js","App.js","reportWebVitals.js","index.js"],"names":["TableView","data","Object","keys","length","Table","responsive","striped","bordered","hover","variant","className","map","key","i","item","ChartView","isEvents","windowSize","useState","width","undefined","height","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","isDataValid","setIsDataValid","BarChart","XAxis","dataKey","YAxis","Legend","verticalAlign","Bar","fill","isTable","timeFrame","StatsScreen","visibleClass","closeCallback","poi","setTimeFrame","setIsEvents","setIsTable","eventsData","setEventsData","statsData","setStatsData","fetch","poi_id","then","response","json","eventsCSVData","setEventsCSVData","statsCSVData","setStatsCSVData","id","name","Button","onClick","filename","DataView","Loading","Spinner","animation","App","setVisibleClass","isLoading","setIsLoading","selectedPoi","setselectedPoi","pois","setPois","MapContainer","center","zoom","zoomControl","TileLayer","url","attribution","Marker","position","lat","lon","eventHandlers","click","Tooltip","permanent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ac27af1.chunk.js","sourcesContent":["// imports\nimport React from 'react';\nimport Table from 'react-bootstrap/Table';\n\n// fill in the header of the table with the keys of one object in data array\n// fill in the rows of the body with the corresponding values of that key in each object\nexport default function TableView({ data }) {\n    return (\n        Object.keys(data).length !== 0 &&\n            <Table responsive striped bordered hover variant=\"dark\" className=\"tableView\">\n                <thead>\n                    <tr>\n                        {Object.keys(data[0]).map((key, i) =>\n                            key === \"d\" ? <th key={i}>date</th> : <th key={i}>{key}</th>\n                        )}\n                    </tr>\n                </thead>\n                <tbody>\n                    {data.map((item, i) => <tr key={i}>{ \n                                                Object.keys(item).map((key, i) => \n                                                    <td key={i}>{item[key]}</td>\n                                                )\n                                            }</tr>)}\n                </tbody>\n            </Table>\n    );\n}\n","// imports\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, Tooltip, Legend, XAxis, YAxis } from 'recharts';\n\n// custom react hook, keeping track of window size\nimport useWindowSize from '../hooks/useWindowSize';\n\nexport default function ChartView({ data, isEvents }) {\n    // state that stores window dimensions from custom hook\n    const windowSize = useWindowSize();\n\n    // state to verify that data is non-empty from API\n    const [isDataValid, setIsDataValid] = useState(false);\n    useEffect(() => {\n        if (Object.keys(data).length !== 0) {\n            setIsDataValid(true);\n        }\n    }, [data, isEvents]);\n\n    // check data is non-empty, render event chart or 3 stats charts depending on user input if so.\n    // using windowsize to specify the height, width of charts, subtracting multiples of 1rem (16px) for even spacing between charts.\n    return(\n        isDataValid && (isEvents ? \n            <div className=\"chartView\">\n                <BarChart width={windowSize.width-16*4} height={windowSize.height-16*11} data={data}>\n                    <XAxis dataKey=\"d\"/>\n                    <YAxis/>\n                    <Tooltip/>\n                    <Legend verticalAlign=\"top\"/>\n                    <Bar fill=\"#000080\" dataKey=\"events\"/>\n                </BarChart>\n            </div> \n            :\n            <div className=\"chartView\">\n                <BarChart width={windowSize.width/3-16*4} height={windowSize.height-16*11} data={data}>\n                    <XAxis dataKey=\"d\"/>\n                    <YAxis/>\n                    <Tooltip/>\n                    <Legend verticalAlign=\"top\"/>\n                    <Bar fill=\"#800000\" dataKey=\"clicks\"/>\n                </BarChart>\n                <BarChart width={windowSize.width/3-16*4} height={windowSize.height-16*11} data={data}>\n                    <XAxis dataKey=\"d\"/>\n                    <YAxis width={70}/>\n                    <Tooltip/>\n                    <Legend verticalAlign=\"top\"/>\n                    <Bar fill=\"#800080\" dataKey=\"impressions\"/>\n                </BarChart>\n                <BarChart width={windowSize.width/3-16*4} height={windowSize.height-16*11} data={data}>\n                    <XAxis dataKey=\"d\"/>\n                    <YAxis/>\n                    <Tooltip/>\n                    <Legend verticalAlign=\"top\"/>\n                    <Bar fill=\"#008000\" dataKey=\"revenue\"/>\n                </BarChart>\n            </div>\n        ) \n    );\n}","// imports\nimport { useState, useEffect } from 'react';\n\nexport default function useWindowSize() {\n\n  // state to store the width and height of the user's window\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // handler to call on window resize\n    function handleResize() {\n      // set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    \n    // add event listener\n    window.addEventListener(\"resize\", handleResize);\n    \n    // call handler right away so state gets updated with initial window size\n    handleResize();\n    \n    // remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return windowSize;\n}","// imports\nimport React, { useState, useEffect } from 'react';\n\n// custom components\nimport TableView from './TableView';\nimport ChartView from './ChartView';\n\nexport default function({ data, isEvents, isTable, timeFrame }) {\n\n    // state to verify that this component has received non-empty data from API\n    const [isDataValid, setIsDataValid] = useState(false);\n    useEffect(() => {\n        if (Object.keys(data).length !== 0) { \n            setIsDataValid(true);\n        }\n    }, [data, timeFrame, isEvents, isTable]);\n\n    return (\n        !isDataValid ? <span>No data.</span> : ( isTable ? <TableView data={data}/> : <ChartView data={data} isEvents={isEvents}/> )\n    );\n}\n","// imports\nimport React, { useState, useEffect } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { IoClose } from \"react-icons/io5\";\nimport CsvDownload from 'react-json-to-csv';\n\n// custom components\nimport DataView from './DataView';\n\n// styles imports\nimport './Styles.css';\n\nexport default function StatsScreen({ visibleClass, closeCallback, poi }) {\n    // state for keeping track if user wants data in daily, weekly, monthly, yearly format\n    const [timeFrame, setTimeFrame] = useState(\"daily\");\n\n    // state for event view or stats view, second state shows data in table vs chart\n    const [isEvents, setIsEvents] = useState(true);\n    const [isTable, setIsTable] = useState(true);\n\n    // get events and stats data, if user changes characteristics of data, pull new event data from api\n    const [eventsData, setEventsData] = useState({});\n    const [statsData, setStatsData] = useState({});\n    useEffect(() => {\n        if (isEvents) {\n            fetch(\"https://eqworks-milisav-api-submission.glitch.me/events/\" + timeFrame + \"/\" + poi.poi_id)\n                .then(response => response.json())\n                .then(response => setEventsData(response))\n        } else {\n            fetch(\"https://eqworks-milisav-api-submission.glitch.me/stats/\" + timeFrame + \"/\" + poi.poi_id)\n                .then(response => response.json())\n                .then(response => setStatsData(response))\n        }\n    }, [isEvents, timeFrame, visibleClass]);\n\n    // state to hold all POI hourly data for user to download as CSV if desired\n    const [eventsCSVData, setEventsCSVData] = useState([]);\n    const [statsCSVData, setStatsCSVData] = useState([]);\n    useEffect(() => {\n        fetch(\"https://eqworks-milisav-api-submission.glitch.me/events/hourly/\" + poi.poi_id)\n            .then(response => response.json())\n            .then(response => setEventsCSVData(response))\n\n        fetch(\"https://eqworks-milisav-api-submission.glitch.me/stats/hourly/\" + poi.poi_id)\n            .then(response => response.json())\n            .then(response => setStatsCSVData(response))\n    }, [visibleClass]);\n\n    return (\n        <div id=\"stats_screen\" className={ visibleClass }>\n\n            <div className=\"header\">\n                <h1>{poi.name}</h1>\n                <Button variant=\"outline-primary\" onClick={closeCallback}>\n                    <IoClose className=\"backBtn\"/>\n                </Button>\n            </div>\n\n            <div className=\"preferencesSection\">\n\n                <div className=\"preferencesSectionGroup\">\n                    <Button variant=\"primary\" onClick={() => setIsEvents(true)}>{poi.name} Events</Button>\n                    <Button variant=\"primary\" onClick={() => setIsEvents(false)}>{poi.name} Statistics</Button>\n                </div>\n\n                <div className=\"preferencesSectionGroup\">\n                    <Button variant=\"secondary\" onClick={() => setIsTable(true)}>Table View</Button>\n                    <Button variant=\"secondary\" onClick={() => setIsTable(false)}>Chart View</Button>\n                </div>\n\n                <div className=\"preferencesSectionGroup\">\n                    <Button variant=\"dark\" onClick={() => setTimeFrame(\"daily\")}>Daily</Button>\n                    <Button variant=\"dark\" onClick={() => setTimeFrame(\"weekly\")}>Weekly</Button>\n                    <Button variant=\"dark\" onClick={() => setTimeFrame(\"monthly\")}>Monthly</Button>\n                    <Button variant=\"dark\" onClick={() => setTimeFrame(\"yearly\")}>Yearly</Button>\n                </div>\n\n                <div className=\"preferencesSectionGroup\">\n\n                    <CsvDownload \n                        className=\"downloadBtn\" \n                        data={eventsCSVData} \n                        filename={\"events_data_\" + poi.name + \".csv\"}>\n                        Download Events CSV\n                    </CsvDownload>\n\n                    <CsvDownload \n                        className=\"downloadBtn\" \n                        data={statsCSVData} \n                        filename={\"stats_data_\" + poi.name + \".csv\"}>\n                        Download Stats CSV\n                    </CsvDownload>\n                </div>\n\n            </div>\n\n            <DataView\n                data={isEvents ? eventsData : statsData}\n                isEvents={isEvents}\n                isTable={isTable}\n                timeFrame={timeFrame}/>\n\n        </div>\n    );\n}\n","// imports\nimport React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\n\n// styles import\nimport './Styles.css';\n\n// provides a spinner to let user know application is loading data\nexport default function Loading() {\n    return (\n        <div className=\"loading\">\n            <Spinner\n                animation=\"border\"\n                variant=\"primary\"/>\n            <span>Loading...</span> \n        </div>\n    );\n}","// imports\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer , Marker, TileLayer, Tooltip } from \"react-leaflet\";\n\n// custom components\nimport StatsScreen from './components/StatsScreen';\nimport Loading from './components/Loading';\n\n// css imports\nimport './App.css';\n\nexport default function App() {\n  // state for showing/hiding the sliding window with an overview for POI\n  const [visibleClass, setVisibleClass] = useState(\"hidden\");\n\n  // state to handle the loading spinner when app initializes\n  const [isLoading, setIsLoading] = useState(true);\n\n  // state for setting the POI that user clicked on map\n  const [selectedPoi, setselectedPoi] = useState({});\n\n  // state storing all POI info on all POIs on map\n  const [pois, setPois] = useState([]);\n  useEffect(() => {\n    fetch(\"https://eqworks-milisav-api-submission.glitch.me/poi\")\n      .then(response => response.json())\n      .then(response => {\n        setPois(response);\n        setIsLoading(false);\n      })\n  }, []);\n\n  // callback to close the sliding window to reveal map again\n  function onBackClick() { setVisibleClass(\"hidden\"); }\n\n  return (\n      isLoading ? <Loading/> :\n        <div>\n\n          <StatsScreen \n            visibleClass={visibleClass} \n            closeCallback={onBackClick}\n            poi={selectedPoi}\n          />\n\n          <MapContainer \n            className=\"MapContainer\" \n            center={[43.6708, -79.3899]} \n            zoom={12} \n            zoomControl={false}\n          >\n\n            <TileLayer\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n              attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            />\n\n            { pois.map(poi =>\n                <Marker \n                  position={[poi.lat, poi.lon]} \n                  key={poi.poi_id}\n                  eventHandlers={{\n                    click: () => {\n                      setselectedPoi(poi);\n                      setVisibleClass(\"visible\");\n                    },\n                  }}\n                >\n                  <Tooltip permanent>{poi.name}</Tooltip>\n\n                </Marker>\n              )\n            }\n\n          </MapContainer>\n\n        </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}